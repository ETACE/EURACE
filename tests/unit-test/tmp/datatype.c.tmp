0 }\\
1 !!*a==*b;\\
2 !!return
3 {\\
4 int!!equal_char(char!!*a,char!!*b)\\
5 }\\
6 !!(abs(*a)>(abs(*b)-TESTPREC))&&((abs(*a)<(abs(*b)+TESTPREC)));\\
7 !!return
8 {\\
9 int!!equal_float(float!!*a,float!!*b)\\
10 }\\
11 !!(abs(*a)>(abs(*b)-TESTPREC))&&((abs(*a)<(abs(*b)+TESTPREC)));\\
12 !!return
13 {\\
14 int!!equal_double(double!!*a,double!!*b)\\
15 }\\
16 !!*a==*b;\\
17 !!return
18 {\\
19 int!!equal_int(int!!*a,int!!*b)\\
20 }\\
21 *c='\0';\\
22 {\\
23 void!!init_char(char!!*c)\\
24 }\\
25 *f=0;\\
26 {\\
27 void!!init_float(float!!*f)\\
28 }\\
29 *d=0;\\
30 {\\
31 void!!init_double(double!!*d)\\
32 }\\
33 *i=0;\\
34 {\\
35 void!!init_int(int!!*i)\\
36 !!"header.h"\\
37 #include
38 }\\
39 !!!!}\\
40 !!!!aninstance->size--;\\
41 aninstance->array[i+1];\\
42 =
43 !!!!!!aninstance->array[i]
44 i++)
45 1);
46 -
47 (size
48 <
49 i
50 index;
51 =
52 !!!!for(i
53 !!!!{\\
54 size)\\
55 <=
56 !!if(index
57 !!size=aninstance->size;\\
58 !!int!!i,size;\\
59 {\\
60 int!!index)\\
61 _array!!*aninstance,
62 (
63 remove_
64 !!
65 void
66 }\\
67 !!anarray->size++;\\
68 (aux,&tmp);\\
69 !!copy_
70 &anarray->array[anarray->size];\\
71 =
72 !!aux
73 !!}\\
74 )));\\
75 sizeof(
76 *
77 ((anarray->total_size)
78 !!*)realloc(anarray->array,
79 (
80 =
81 !!!!anarray->array
82 !!!!anarray->total_size=anarray->total_size+ARRAY_BLOCK_SIZE;\\
83 !!{\\
84 !!if(anarray->size==anarray->total_size)\\
85 =source;\\
86 tmp
87 !!
88 !!tmp;\\
89 !!
90 !!*aux;\\
91 !!
92 {\\
93 !!source)\\
94 _array!!*anarray,
95 (
96 void!!add_
97 }\\
98 fprintf(file,"%c",'}');\\
99 }\\
100 fprintf(file,"%c",',');\\
101 if(i<aninstance->size-1)
102 );\\
103 file
104 (&aninstance->array[i],
105 print_xml_
106 !!!!
107 {\\
108 for(i=0;i<aninstance->size;i++)\\
109 fprintf(file,"%c",'{');\\
110 int!!i;\\
111 {\\
112 )\\
113 *file
114 FILE
115 _array!!*aninstance,
116 _array(
117 print_xml_
118 !!
119 void
120 }\\
121 fprintf(file,"%c",'}');\\
122 }\\
123 fprintf(file,"%c",',');\\
124 if(i<size-1)
125 );\\
126 file
127 (&aninstance[i],
128 print_xml_
129 !!!!
130 {\\
131 for(i=0;i<size;i++)\\
132 fprintf(file,"%c",'{');\\
133 int!!i;\\
134 {\\
135 int!!size)\\
136 ,
137 *file
138 FILE
139 !!*aninstance,
140 (
141 _static_array
142 print_xml_
143 !!
144 void
145 }\\
146 *aninstance);\\
147 ",
148 "
149 fprintf(file,
150 {\\
151 )\\
152 *file
153 FILE
154 !!*aninstance,
155 (
156 print_xml_
157 !!
158 void
159 }\\
160 !!dest->array[i]=source->array[i];\\
161 for(i=0;i<source->size;i++)\\
162 int!!i;\\
163 {\\
164 _array!!*source)\\
165 _array!!*dest,
166 _array(
167 void!!copy_
168 }\\
169 !!dest[i]=source[i];\\
170 for(i=0;i<size;i++)\\
171 int!!i;\\
172 {\\
173 int!!size)\\
174 !!*source,
175 !!*dest,
176 _static_array(
177 void!!copy_
178 }\\
179 *dest=*source;\\
180 {\\
181 !!*source)\\
182 !!*dest,
183 (
184 void!!copy_
185 }\\
186 !!}\\
187 aux);\\
188 aninstance,
189 (
190 !!!!add_
191 !!!!*index=*index+1;\\
192 &aux,file,index);\\
193 (
194 !!!!read_xml_
195 !!{\\
196 while((file[*index]!='}')&&(*index<len))\\
197 !!!!*index=*index+1;\\
198 !!aux;\\
199 !!!!
200 !!len=strlen(file);\\
201 !!int!!len;\\
202 {\\
203 *index)\\
204 !!*file,int
205 _array!!*aninstance,char
206 _array(
207 void!!read_xml_
208 }\\
209 *index=*index+1;\\
210 !!!!}\\
211 (&aninstance[i],file,index);\\
212 !!!!!!read_xml_
213 *index=*index+1;\\
214 !!!!{\\
215 for(i=0;i<size;i++)\\
216 int!!i;\\
217 {\\
218 int!!size,int!!*index)\\
219 !!*file,
220 !!*aninstance,char
221 _static_array(
222 void!!read_xml_
223 !!}\\
224 \n",*aninstance);\\
225 !!
226 !!
227 //!!!!!!printf("reading
228 ",aninstance);\\
229 !!!!!!sscanf(buffer,"
230 //!!!!!!printf("%s",buffer);\\
231 !!!!!!buffer[j]='\0';\\
232 !!!!!!}\\
233 !!!!!!!!j++;\\
234 !!!!!!!!*index=*index+1;\\
235 !!!!!!!!buffer[j]=file[*index];\\
236 !!!!!!{\\
237 !!!!while((file[*index]!=',')&&(file[*index]!='}')&&(file[*index]!='\0')&&(*index<len))\\
238 !!!!buffer[j]='\0';
239 !!!!j=0;\\
240 !!!!len=strlen(file);\\
241 !!!!char!!buffer[MAXBUF];\\
242 !!!!int!!len;\\
243 !!!!int!!j;\\
244 !!{\\
245 char!!*file,int!!*index)\\
246 !!*aninstance,
247 (
248 void!!read_xml_
249 }\\
250 !!aninstance->size=0;
251 {\\
252 _array!!*aninstance)\\
253 _array(
254 !!reset_
255 void
256 }\\
257 !!free(aninstance->array);\\
258 {\\
259 _array!!*aninstance)\\
260 _array(
261 !!free_
262 void
263 }\\
264 (&aninstance->array[i]);\\
265 init_
266 for(i=0;i<aninstance->total_size;i++)\\
267 aninstance->total_size=ARRAY_BLOCK_SIZE;\\
268 aninstance->size=0;
269 )*ARRAY_BLOCK_SIZE);\\
270 *)malloc(sizeof(
271 aninstance->array=(
272 int!!i;\\
273 {\\
274 _array!!*aninstance)\\
275 _array(
276 !!init_
277 void
278 }\\
279 !!assertion;\\
280 return
281 (&a->array[i],&b->array[i]);\\
282 !!!!assertion=assertion&&equal_
283 for(i=0;i<a->size;i++)\\
284 !!0;\\
285 !!return
286 if(a->size!=b->size)
287 !!assertion=1;\\
288 !!int!!i;\\
289 !!int!!assertion;
290 {\\
291 _array!!*b)\\
292 _array!!*a,
293 _array(
294 !!equal_
295 int
296 }\\
297 !!assertion;\\
298 return
299 (&a[i],&b[i]);\\
300 equal_
301 !!!!assertion=assertion&
302 for(i=0;i<size;i++)\\
303 !!assertion=1;\\
304 !!int!!i;\\
305 !!int!!assertion;
306 {\\
307 size)\\
308 !!
309 !!*b,int
310 !!*a,
311 _static_array(
312 !!equal_
313 int
314 }\\
315 (&aninstance[i]);\\
316 init_
317 for(i=0;i<size;i++)\\
318 int!!i;\\
319 {\\
320 size)\\
321 !!
322 int
323 !!*aninstance,
324 _static_array(
325 !!init_
326 void
327 {\\
328 !!*aninstance)\\
329 (
330 init_
331 !!
332 void
333 );\\
334 &aninstance->
335 (
336 init_
337 );\\
338 ,
339 aninstance->
340 _array(
341 init_
342 {\\
343 !!*aninstance)\\
344 (
345 free_
346 !!
347 void
348 }\\
349 ));\\
350 &(aninstance->
351 (
352 free_
353 !!result=1;\\
354 !!result;\\
355 !!int
356 {\\
357 )\\
358 !!*b
359 !!*a,
360 (
361 equal_
362 !!
363 int
364 }\\
365 );\\
366 ,&b->
367 &a->
368 (
369 equal_
370 &&
371 !!result=result
372 );\\
373 ,
374 b->
375 ,
376 a->
377 _array(
378 equal_
379 &&
380 !!result=result
381 {\\
382 !!*source)\\
383 !!*dest,
384 (
385 copy_
386 !!
387 void
388 }\\
389 !!result;
390 return
391 );\\
392 ,
393 source->
394 ,
395 dest->
396 _array(
397 copy_
398 );\\
399 &source->
400 ,
401 &dest->
402 (
403 copy_
404 _array!!*anarray
405 (
406 void!!add_
407 }\\
408 ]
409 [
410 !!
411 ,
412 !!
413 !!
414 ,
415 &anarray->array[anarray->size];\\
416 =
417 aux
418 !!}\\
419 (&anarray->array[i]);\\
420 !!!!init_
421 for(i=prec_size;i<anarray->total_size;i++)\\
422 )));\\
423 sizeof(
424 *
425 ((anarray->total_size)
426 !!*)realloc(anarray->array,
427 (
428 =
429 !!!!anarray->array
430 !!!!anarray->total_size=anarray->total_size+ARRAY_BLOCK_SIZE;\\
431 !!!!prec_size=anarray->total_size;\\
432 !!!!{\\
433 !!if(anarray->size==anarray->total_size)\\
434 !!*aux;\\
435 !!int!!prec_size;\\
436 !!int!!i;\\
437 {\\
438 )\\
439 ,
440 ,
441 aux->
442 _array(
443 copy_
444 &
445 ,
446 )
447 (&(aux->
448 copy_
449 ;\\
450 =
451 //!!tmp_
452 ;\\
453 !!tmp_
454 //__type
455 );\\
456 dest
457 (
458 add_
459 !!!!aux=&source->array[i];\\
460 !!{\\
461 for(i=0;i<source->size;i++)\\
462 !!dest->size=0;\\
463 !!*aux;\\
464 !!
465 !!int!!i;\\
466 {\\
467 _array!!*source)\\
468 _array!!*dest,
469 _array(
470 copy_
471 !!
472 void
473 }\\
474 anarray->size++;\\
475 ,aux->
476 aux->
477 ,
478 \n",file);\\
479 %s
480 !!
481 printf("reading
482 printf("\n%d",*index);\\
483 {\\
484 int!!*index)\\
485 char!!*file,
486 !!*aninstance,
487 (
488 read_xml_
489 !!
490 void
491 }\\
492 aninstance->array=NULL;\\
493 ;\\
494 free(aninstance->array)
495 (&aninstance->array[i]);\\
496 !!!!free_
497 for(i=0;i<aninstance->total_size;i++)\\
498 int!!i;\\
499 {\\
500 _array!!*aninstance)\\
501 _array(
502 free_
503 !!
504 void
505 }\\
506 0;\\
507 =
508 aninstance->size
509 {\\
510 _array!!*aninstance)\\
511 _array(
512 reset_
513 !!
514 void
515 }\\
516 (&aninstance->array[i]);\\
517 !!!!init_
518 for(i=0;i<aninstance->total_size;i++)\\
519 ));\\
520 *)malloc(ARRAY_BLOCK_SIZE!!*sizeof(
521 (
522 =
523 aninstance->array
524 ARRAY_BLOCK_SIZE;\\
525 =
526 aninstance->total_size
527 0;\\
528 =
529 aninstance->size
530 int!!i;\\
531 {\\
532 _array!!*aninstance)\\
533 _array(
534 init_
535 !!
536 void
537 }\\
538 !!result;\\
539 return
540 (&a[i],&b[i]);\\
541 !!!!result=result&&equal_
542 !!for(i=0;i<size;i++)\\
543 !!result=1;\\
544 !!int!!i,result;\\
545 {\\
546 int!!size)\\
547 !!*b,
548 !!*a,
549 _static_array(
550 equal_
551 !!
552 int
553 }\\
554 (&aninstance[i]);\\
555 !!init_
556 for(i=0;i<size;i++)\\
557 int!!i;\\
558 {\\
559 int!!size)\\
560 !!*aninstance,
561 _static_array(
562 init_
563 !!
564 void
565 }\\
566 return!!result;\\
567 &a->array[i],&b->array[i]);\\
568 (
569 result=result&&equal_
570 for(i=0;i<a->size;i++)\\
571 !!0;\\
572 !!return
573 if(a->size!=b->size)
574 result=1;\\
575 int!!i,result;\\
576 {\\
577 _array!!*b)\\
578 _array!!*a,
579 _array(
580 equal_
581 !!
582 int
583 }\\
584 !!}\\
585 );\\
586 *index=*index+1;\\
587 index);\\
588 ,
589 file,
590 ,
591 _array(aninstance->
592 read_xml_
593 index);\\
594 file,
595 ,
596 (&aninstance->
597 read_xml_
598 (aninstance
599 !!!!add_
600 &aux,file,index);\\
601 (
602 !!!!read_xml_
603 !!!!cond=0;\\
604 !!{\\
605 while((*index<len-1)&&(file[*index]!='}'))\\
606 !!cond=1;\\
607 printf("%c",file[*index]);\\
608 (&aux);\\
609 init_
610 !!aux;\\
611 !!!!*index=*index+1;\\
612 !!len=strlen(file);\\
613 !!int!!len,cond;\\
614 \n",file);\\
615 %s
616 __array
617 !!
618 printf("reading
619 {\\
620 int!!*index)\\
621 char!!*file,
622 _array!!*aninstance,
623 _array(
624 read_xml_
625 !!
626 void
627 }\\
628 *index=*index+1;\\
629 aux.
630 ,
631 fprintf(file,"%c",'{');\\
632 {\\
633 FILE!!*file)\\
634 !!*aninstance,
635 (
636 print_xml_
637 !!
638 void
639 }\\
640 *index=*index+1;\\
641 !!!!}\\
642 (&aninstance[i],file,index);\\
643 !!!!!!read_xml_
644 *index=*index+1;\\
645 !!!!{\\
646 for(i=0;i<size;i++)\\
647 int!!i;\\
648 {\\
649 int!!size,int!!*index)\\
650 !!*file,
651 !!*aninstance,char
652 _static_array(
653 void!!read_xml_
654 }\\
655 (&aux);\\
656 free_
657 !!!!*index=*index+1;\\
658 !!!!if(cond)
659 !!}\\
660 !!!!*index=*index+1;\\
661 );\\
662 );\\
663 file,
664 ,
665 _array(aninstance->
666 print_xml_
667 file);\\
668 ,
669 (&aninstance->
670 print_xml_
671 !!!!fprintf(file,",");\\
672 }\\
673 !!!!}\\
674 !!!!!!aninstance->size--;\\
675 );\\
676 &aninstance->array[i+1]
677 ,
678 &aninstance->array[i]
679 (
680 !!!!!!!!copy_
681 i++)
682 1);
683 -
684 (size
685 <
686 i
687 index;
688 =
689 !!!!!!for(i
690 !!!!{\\
691 size)\\
692 <=
693 !!if(index
694 !!size=aninstance->size;\\
695 !!int!!i,size;\\
696 {\\
697 int!!index)\\
698 _array!!*aninstance,
699 (
700 remove_
701 !!
702 void
703 }\\
704 fprintf(file,"%c",'}');\\
705 }\\
706 fprintf(file,"%c",',');\\
707 if(i<size-1)
708 );\\
709 file
710 (&aninstance[i],
711 print_xml_
712 !!!!
713 {\\
714 for(i=0;i<size;i++)\\
715 fprintf(file,"%c",'{');\\
716 int!!i;\\
717 {\\
718 int!!size)\\
719 ,
720 *file
721 FILE
722 !!*aninstance,
723 (
724 _static_array
725 print_xml_
726 !!
727 void
728 }\\
729 fprintf(file,"%c",'}');\\
730 !!}\\
731 !!!!!!fprintf(file,"%c",',');\\
732 !!!!if(i<aninstance->size-1)\\
733 (&aninstance->array[i],file);\\
734 !!!!print_xml_
735 !!{\\
736 for(i=0;i<aninstance->size;i++)\\
737 fprintf(file,"%c",'{');\\
738 int!!i;\\
739 {\\
740 FILE!!*file)\\
741 _array!!*aninstance,
742 _array(
743 print_xml_
744 !!
745 void
746 }\\
747 fprintf(file,"%c",'}');\\
