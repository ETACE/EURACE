0 #define!!MAXCHAR!!100\\
1 !!0.000001\\
2 #define!!TESTPREC
3 #define!!MAXBUF!!25\\
4 5\\
5 #define!!ARRAY_BLOCK_SIZE!!
6 <libxml/tree.h>\\
7 !!
8 #include
9 <libxml/parser.h>\\
10 !!
11 #include
12 <assert.h>\\
13 !!
14 #include
15 <math.h>\\
16 !!
17 #include
18 <stdlib.h>\\
19 !!
20 #include
21 <stdio.h>\\
22 !!
23 #include
24 <string.h>\\
25 !!
26 #include
27 #define!!LHH\\
28 #ifndef!!LHH\\
29 }\\
30 _message);
31 _message(
32 get_next_
33 =
34 _message
35 _MESSAGE_LOOP!!
36 #define!!FINISH_
37 {\\
38 _message)
39 while(
40 _message();
41 get_first_
42 =
43 _message
44 !!
45 _MESSAGE_LOOP
46 #define!!START_
47 \\
48 \\
49 constants.
50 !!
51 #define!!
52 _array;\\
53 }!!
54 *array;\\
55 !!
56 !!!!
57 !!!!int!!total_size;\\
58 !!!!int!!size;\\
59 {\\
60 \\
61 typedef!!struct
62 {\\
63 _s\\
64 struct!!
65 ];\\
66 [
67 !!
68 ;\\
69 !!
70 _array;\\
71 _array_s!!
72 typedef!!struct!!
73 };\\
74 array;\\
75 *
76 !!
77 !!
78 int!!total_size;\\
79 int!!size;\\
80 {\\
81 _array_s\\
82 struct!!
83 ;\\
84 !!
85 _s
86 typedef!!struct!!
87 };\\
88 !!!!{\\
89 typedef!!struct\\
90 ];\\
91 [
92 !!
93 !!!!!!
94 ;\\
95 !!
96 !!!!!!
97 ;\\
98 !!}!!
99 {\\
100 constants_s\\
101 !!
102 struct
103 ];\\
104 [
105 !!
106 ;\\
107 !!
108 {\\
109 xmachine_list\\
110 !!
111 struct
112 xmlNode!!*a_node);\\
113 !!*constants,
114 Constants
115 (
116 read_xml_constants
117 !!
118 void
119 ;\\
120 typedef!!struct!!constants_s!!Constants
121 };\\
122 ;\\
123 !!*an
124 int!!equal_char(char!!*a,char!!*b);\\
125 int!!equal_float(float!!*a,float!!*b);\\
126 int!!equal_double(double!!*a,double!!*b);\\
127 int!!equal_int(int!!*a,int!!*b);\\
128 void!!init_char(char!!*c);\\
129 void!!init_float(float!!*f);\\
130 void!!init_double(double!!*d);\\
131 void!!init_int(int!!*i);\\
132 struct!!xmachine_list!!XMachineList;\\
133 !!
134 typedef
135 };\\
136 _array!!*aninstance);\\
137 _array(
138 !!reset_
139 void
140 int!!index);\\
141 _array!!*aninstance,
142 (
143 remove_
144 !!
145 void
146 !!source);\\
147 _array!!*anarray,
148 (
149 add_
150 !!
151 void
152 _array!!*aninstance);\\
153 _array(
154 !!free_
155 void
156 _array!!*aninstance);\\
157 _array(
158 !!init_
159 void
160 size);\\
161 !!
162 int
163 !!*aninstace,
164 _static_array(
165 init_
166 !!
167 void
168 );\\
169 *file
170 FILE
171 _array!!*aninstance,
172 _array(
173 print_xml_
174 !!
175 void
176 int!!size);\\
177 ,
178 *file
179 FILE
180 !!*aninstance,
181 (
182 _static_array
183 print_xml_
184 !!
185 void
186 );\\
187 *file
188 FILE
189 !!*aninstance,
190 (
191 print_xml_
192 !!
193 void
194 _array!!*source);\\
195 _array!!*dest,
196 _array(
197 int!!equal_
198 int!!size);\\
199 !!*source,
200 !!*dest,
201 _static_array(
202 int!!equal_
203 int!!size);\\
204 !!*source,
205 !!*dest,
206 _static_array(
207 void!!copy_
208 !!*source);\\
209 !!*dest,
210 (
211 void!!copy_
212 *index);\\
213 !!*file,int
214 _array!!*aninstance,char
215 _array(
216 void!!read_xml_
217 int!!size,int!!*index);\\
218 !!*file,
219 !!*aninstance,char
220 _static_array(
221 void!!read_xml_
222 int!!*index);\\
223 *file,
224 char
225 !!*i,
226 (
227 void!!read_xml_
228 _array!!*anarray
229 (
230 !!add_
231 void
232 !!*source);\\
233 !!*dest,
234 (
235 !!equal_
236 int
237 !!*source);\\
238 !!*dest,
239 (
240 !!copy_
241 void
242 !!*aninstance);\\
243 (
244 free_
245 !!
246 void
247 !!*aninstance);\\
248 (
249 !!init_
250 void
251 ]
252 [
253 !!
254 ,
255 !!
256 !!
257 ,
258 int!!index);\\
259 _array!!*aninstance,
260 (
261 remove_
262 !!
263 void
264 int!!size);\\
265 ,
266 *file
267 FILE
268 !!*aninstance,
269 (
270 _static_array
271 print_xml_
272 !!
273 void
274 FILE!!*file);\\
275 _array!!*aninstance,
276 _array(
277 print_xml_
278 !!
279 void
280 FILE!!*file);\\
281 !!*aninstance,
282 (
283 print_xml_
284 !!
285 void
286 int!!size,int!!*index);\\
287 !!*file,
288 !!*aninstance,char
289 _static_array(
290 void!!read_xml_
291 int!!*index);\\
292 char!!*file,
293 _array!!*aninstance,
294 _array(
295 read_xml_
296 !!
297 void
298 char!!*file,int!!*index);\\
299 !!*aninstance,
300 (
301 read_xml_
302 !!
303 void
304 _array!!*aninstance);\\
305 _array(
306 free_
307 !!
308 void
309 _array!!*aninstance);\\
310 _array(
311 reset_
312 !!
313 void
314 _array!!*aninstance);\\
315 _array(
316 init_
317 !!
318 void
319 int!!size);\\
320 !!*aninstance,
321 _static_array(
322 init_
323 !!
324 void
325 int!!size);\\
326 !!*source,
327 !!*dest,
328 _static_array(
329 equal_
330 !!
331 int
332 _array!!*source);\\
333 _array!!*dest,
334 _array(
335 equal_
336 !!
337 int
338 _array!!*source);\\
339 _array!!*dest,
340 _array(
341 copy_
342 !!
343 void
344 );\\
345 *anagent);\\
346 !!
347 (
348 init_
349 !!
350 void
351 !!*file);\\
352 FILE
353 !!*anagent,
354 (
355 print_xml_
356 !!
357 void
358 xmlNode!!*a_node);\\
359 !!*anagent,
360 (
361 read_xml_
362 !!
363 void
364 !!*xmachinelist);\\
365 *filename,XMachineList
366 read_initial_states(char
367 !!
368 void
369 !!*xmachinelist);
370 XMachineList
371 !!*filename,
372 void!!print_initial_states(char
373 !!*xmachinelist);\\
374 a_node,XMachineList
375 void!!read_states(xmlNode!!*
376 {\\
377 _ms\\
378 struct!!
379 ];\\
380 [
381 !!
382 ;\\
383 !!
384 _messages;\\
385 _array_ms!!
386 typedef!!struct!!
387 };\\
388 array;\\
389 *
390 !!
391 m_
392 !!
393 int!!index;\\
394 int!!total_size;\\
395 int!!size;\\
396 {\\
397 _array_ms\\
398 struct!!
399 ;\\
400 !!m_
401 _ms
402 typedef!!struct!!
403 };\\
404 _messages!!*anarray
405 (
406 !!add_m_
407 void
408 !!*source);\\
409 m_
410 !!*dest,
411 m_
412 (
413 !!equal_m_
414 //int
415 !!*source);\\
416 m_
417 !!*dest,
418 m_
419 (
420 !!copy_m_
421 void
422 !!*aninstance);\\
423 m_
424 (
425 !!init_m_
426 void
427 ]
428 [
429 !!
430 ,
431 !!
432 !!
433 ,
434 (
435 _message
436 add_
437 !!
438 void
439 ();\\
440 _message
441 !!*get_next_
442 m_
443 ();\\
444 _message
445 !!*get_first_
446 m_
447 _messages!!*b);\\
448 _messages!!*a,
449 _messages(
450 equal_
451 !!
452 int
453 );\\
454 !!*b
455 m_
456 !!*a,
457 m_
458 (
459 m_
460 equal_
461 !!
462 int
463 FILE!!*file);\\
464 _messages!!*aninstance,
465 _messages(
466 print_xml_m_
467 !!
468 void
469 FILE!!*file);\\
470 !!*aninstance,
471 m_
472 (
473 print_xml_m_
474 !!
475 void
476 char!!*file,int!!*index);\\
477 !!*aninstance,
478 _messages
479 _messages(
480 read_xml_
481 !!
482 void
483 char!!*file,int!!*index);\\
484 !!*aninstance,
485 m_
486 (
487 read_xml_m_
488 !!
489 void
490 _messages!!*aninstance);\\
491 _messages(
492 free_
493 !!
494 void
495 _messages!!*aninstance);\\
496 _messages(
497 reset_
498 !!
499 void
500 _messages!!*aninstance);\\
501 _messages(
502 init_
503 !!
504 void
505 int!!size);\\
506 !!*aninstance,
507 m_
508 _static_messages(
509 init_
510 !!
511 void
512 _messages!!*source);\\
513 _messages!!*dest,
514 _messages(
515 copy_
516 !!
517 void
518 );\\
519 ]
520 [
521 !!
522 ,
523 !!
524 !!
525 ,
526 );\\
527 {\\
528 struct!!messages_list\\
529 _list;\\
530 _messages!!*
531 !!*expected_messages;\\
532 XMessageList
533 !!*current_messages;\\
534 XMessageList
535 !!*expected;\\
536 XMachineList
537 !!*current;\\
538 XMachineList
539 char!!*nome_file);\\
540 !!*xmessagelist,
541 void!!print_xmessagelist(XMessageList
542 !!*xmessagelist);\\
543 void!!free_xmessagelist(XMessageList
544 !!*xmessagelist);\\
545 void!!reset_xmessagelist(XMessageList
546 !!*xmessagelist);\\
547 void!!initialize_xmessagelist(XMessageList
548 !!*xmachinelist);\\
549 void!!initialize_xmachinelist(XMachineList
550 XMessageList;\\
551 typedef!!struct!!messages_list!!
552 };\\
553 ;\\
554 *expected_
555 !!
556 ;\\
557 *current_
558 !!
559 *xmachinelist);\\
560 !!
561 XMachineList
562 xmachinelist(
563 !!free_
564 void
565 *anagent);\\
566 !!
567 (
568 !!free_
569 void
570 *xmachinelist);\\
571 !!
572 XMachineList
573 (
574 !!initialize_
575 void
576 Constants!!constants;\\
577 \\
578 _message;
579 *
580 !!
581 m_
582 *xmessagelist);\\
583 !!
584 XMessageList
585 (
586 void!!initialize_
587 iteration_loop;\\
588 !!
589 int
590 ();\\
591 !!*get_
592 );\\
593 !!
594 (
595 !!set_
596 void
597 ();\\
598 !!get_
599 ();\\
600 !!*get_
601 #endif
