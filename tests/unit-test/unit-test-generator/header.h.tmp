0 #define!!MAXCHAR!!100\\
1 !!0.000001\\
2 #define!!TESTPREC
3 #define!!MAXBUF!!25\\
4 5\\
5 #define!!ARRAY_BLOCK_SIZE!!
6 <libxml/tree.h>\\
7 !!
8 #include
9 <libxml/parser.h>\\
10 !!
11 #include
12 <assert.h>\\
13 !!
14 #include
15 <math.h>\\
16 !!
17 #include
18 <stdlib.h>\\
19 !!
20 #include
21 <stdio.h>\\
22 !!
23 #include
24 <string.h>\\
25 !!
26 #include
27 #define!!LHH\\
28 #ifndef!!LHH\\
29 }\\
30 _message);
31 _message(
32 get_next_
33 =
34 _message
35 _MESSAGE_LOOP!!
36 #define!!FINISH_
37 {\\
38 _message)
39 while(
40 _message();
41 get_first_
42 =
43 _message
44 !!
45 _MESSAGE_LOOP
46 #define!!START_
47 \\
48 \\
49 constants.
50 !!
51 #define!!
52 _array;\\
53 }!!
54 *array;\\
55 !!
56 !!!!
57 !!!!int!!total_size;\\
58 !!!!int!!size;\\
59 {\\
60 \\
61 typedef!!struct
62 {\\
63 _s\\
64 struct!!
65 ];\\
66 [
67 !!
68 ;\\
69 !!
70 _array;\\
71 _array_s!!
72 typedef!!struct!!
73 };\\
74 array;\\
75 *
76 !!
77 !!
78 int!!total_size;\\
79 int!!size;\\
80 {\\
81 _array_s\\
82 struct!!
83 ;\\
84 !!
85 _s
86 typedef!!struct!!
87 };\\
88 !!!!{\\
89 typedef!!struct\\
90 ];\\
91 [
92 !!
93 !!!!!!
94 ;\\
95 !!
96 !!!!!!
97 ;\\
98 !!}!!
99 {\\
100 constants_s\\
101 !!
102 struct
103 ];\\
104 [
105 !!
106 ;\\
107 !!
108 {\\
109 xmachine_list\\
110 !!
111 struct
112 xmlNode!!*a_node);\\
113 !!*constants,
114 Constants
115 (
116 read_xml_constants
117 !!
118 void
119 ;\\
120 typedef!!struct!!constants_s!!Constants
121 };\\
122 ;\\
123 !!*an
124 int!!equal_char(char!!*a,char!!*b);\\
125 int!!equal_float(float!!*a,float!!*b);\\
126 int!!equal_double(double!!*a,double!!*b);\\
127 int!!equal_int(int!!*a,int!!*b);\\
128 void!!init_char(char!!*c);\\
129 void!!init_float(float!!*f);\\
130 void!!init_double(double!!*d);\\
131 void!!init_int(int!!*i);\\
132 struct!!xmachine_list!!XMachineList;\\
133 !!
134 typedef
135 };\\
136 _array!!*aninstance);\\
137 _array(
138 !!reset_
139 void
140 int!!index);\\
141 _array!!*aninstance,
142 (
143 remove_
144 !!
145 void
146 !!source);\\
147 _array!!*anarray,
148 (
149 add_
150 !!
151 void
152 _array!!*aninstance);\\
153 _array(
154 !!free_
155 void
156 _array!!*aninstance);\\
157 _array(
158 !!init_
159 void
160 size);\\
161 !!
162 int
163 !!*aninstace,
164 _static_array(
165 init_
166 !!
167 void
168 );\\
169 *file
170 FILE
171 _array!!*aninstance,
172 _array(
173 print_xml_
174 !!
175 void
176 int!!size);\\
177 ,
178 *file
179 FILE
180 !!*aninstance,
181 (
182 _static_array
183 print_xml_
184 !!
185 void
186 );\\
187 *file
188 FILE
189 !!*aninstance,
190 (
191 print_xml_
192 !!
193 void
194 _array!!*source);\\
195 _array!!*dest,
196 _array(
197 int!!equal_
198 int!!size);\\
199 !!*source,
200 !!*dest,
201 _static_array(
202 int!!equal_
203 int!!size);\\
204 !!*source,
205 !!*dest,
206 _static_array(
207 void!!copy_
208 !!*source);\\
209 !!*dest,
210 (
211 void!!copy_
212 *index);\\
213 !!*file,int
214 _array!!*aninstance,char
215 _array(
216 void!!read_xml_
217 int!!size,int!!*index);\\
218 !!*file,
219 !!*aninstance,char
220 _static_array(
221 void!!read_xml_
222 int!!*index);\\
223 *file,
224 char
225 !!*i,
226 (
227 void!!read_xml_
228 _array!!*anarray
229 (
230 void!!add_
231 !!*source);\\
232 !!*dest,
233 (
234 !!equal_
235 int
236 !!*source);\\
237 !!*dest,
238 (
239 !!copy_
240 void
241 !!*aninstance);\\
242 (
243 free_
244 !!
245 void
246 !!*aninstance);\\
247 (
248 !!init_
249 void
250 ]
251 [
252 !!
253 ,
254 !!
255 !!
256 ,
257 !!
258 !!*
259 ,
260 int!!index);\\
261 _array!!*aninstance,
262 (
263 remove_
264 !!
265 void
266 int!!size);\\
267 ,
268 *file
269 FILE
270 !!*aninstance,
271 (
272 _static_array
273 print_xml_
274 !!
275 void
276 FILE!!*file);\\
277 _array!!*aninstance,
278 _array(
279 print_xml_
280 !!
281 void
282 FILE!!*file);\\
283 !!*aninstance,
284 (
285 print_xml_
286 !!
287 void
288 int!!size,int!!*index);\\
289 !!*file,
290 !!*aninstance,char
291 _static_array(
292 void!!read_xml_
293 int!!*index);\\
294 char!!*file,
295 _array!!*aninstance,
296 _array(
297 read_xml_
298 !!
299 void
300 char!!*file,int!!*index);\\
301 !!*aninstance,
302 (
303 read_xml_
304 !!
305 void
306 _array!!*aninstance);\\
307 _array(
308 free_
309 !!
310 void
311 _array!!*aninstance);\\
312 _array(
313 reset_
314 !!
315 void
316 _array!!*aninstance);\\
317 _array(
318 init_
319 !!
320 void
321 int!!size);\\
322 !!*aninstance,
323 _static_array(
324 init_
325 !!
326 void
327 int!!size);\\
328 !!*source,
329 !!*dest,
330 _static_array(
331 equal_
332 !!
333 int
334 _array!!*source);\\
335 _array!!*dest,
336 _array(
337 equal_
338 !!
339 int
340 _array!!*source);\\
341 _array!!*dest,
342 _array(
343 copy_
344 !!
345 void
346 );\\
347 *anagent);\\
348 !!
349 (
350 init_
351 !!
352 void
353 !!*file);\\
354 FILE
355 !!*anagent,
356 (
357 print_xml_
358 !!
359 void
360 xmlNode!!*a_node);\\
361 !!*anagent,
362 (
363 read_xml_
364 !!
365 void
366 !!*xmachinelist);\\
367 *filename,XMachineList
368 read_initial_states(char
369 !!
370 void
371 !!*xmachinelist);
372 XMachineList
373 !!*filename,
374 void!!print_initial_states(char
375 !!*xmachinelist);\\
376 a_node,XMachineList
377 void!!read_states(xmlNode!!*
378 {\\
379 _ms\\
380 struct!!
381 ];\\
382 [
383 !!
384 ;\\
385 !!
386 _messages;\\
387 _array_ms!!
388 typedef!!struct!!
389 };\\
390 array;\\
391 *
392 !!
393 m_
394 !!
395 int!!index;\\
396 int!!total_size;\\
397 int!!size;\\
398 {\\
399 _array_ms\\
400 struct!!
401 ;\\
402 !!m_
403 _ms
404 typedef!!struct!!
405 };\\
406 _messages!!*anarray
407 (
408 !!add_m_
409 void
410 !!*source);\\
411 m_
412 !!*dest,
413 m_
414 (
415 !!equal_m_
416 //int
417 !!*source);\\
418 m_
419 !!*dest,
420 m_
421 (
422 !!copy_m_
423 void
424 !!*aninstance);\\
425 m_
426 (
427 !!init_m_
428 void
429 ]
430 [
431 !!
432 ,
433 !!
434 !!
435 ,
436 (
437 _message
438 add_
439 !!
440 void
441 ();\\
442 _message
443 !!*get_next_
444 m_
445 ();\\
446 _message
447 !!*get_first_
448 m_
449 _messages!!*b);\\
450 _messages!!*a,
451 _messages(
452 equal_
453 !!
454 int
455 );\\
456 !!*b
457 m_
458 !!*a,
459 m_
460 (
461 m_
462 equal_
463 !!
464 int
465 FILE!!*file);\\
466 _messages!!*aninstance,
467 _messages(
468 print_xml_m_
469 !!
470 void
471 FILE!!*file);\\
472 !!*aninstance,
473 m_
474 (
475 print_xml_m_
476 !!
477 void
478 char!!*file,int!!*index);\\
479 !!*aninstance,
480 _messages
481 _messages(
482 read_xml_
483 !!
484 void
485 char!!*file,int!!*index);\\
486 !!*aninstance,
487 m_
488 (
489 read_xml_m_
490 !!
491 void
492 _messages!!*aninstance);\\
493 _messages(
494 free_
495 !!
496 void
497 _messages!!*aninstance);\\
498 _messages(
499 reset_
500 !!
501 void
502 _messages!!*aninstance);\\
503 _messages(
504 init_
505 !!
506 void
507 int!!size);\\
508 !!*aninstance,
509 m_
510 _static_messages(
511 init_
512 !!
513 void
514 _messages!!*source);\\
515 _messages!!*dest,
516 _messages(
517 copy_
518 !!
519 void
520 );\\
521 ]
522 [
523 !!
524 ,
525 !!
526 !!
527 ,
528 );\\
529 {\\
530 struct!!messages_list\\
531 _list;\\
532 _messages!!*
533 !!*expected_messages;\\
534 XMessageList
535 !!*current_messages;\\
536 XMessageList
537 !!*expected;\\
538 XMachineList
539 !!*current;\\
540 XMachineList
541 char!!*nome_file);\\
542 !!*xmessagelist,
543 void!!print_xmessagelist(XMessageList
544 !!*xmessagelist);\\
545 void!!free_xmessagelist(XMessageList
546 !!*xmessagelist);\\
547 void!!reset_xmessagelist(XMessageList
548 !!*xmessagelist);\\
549 void!!initialize_xmessagelist(XMessageList
550 !!*xmachinelist);\\
551 void!!initialize_xmachinelist(XMachineList
552 XMessageList;\\
553 typedef!!struct!!messages_list!!
554 };\\
555 ;\\
556 *expected_
557 !!
558 ;\\
559 *current_
560 !!
561 *xmachinelist);\\
562 !!
563 XMachineList
564 xmachinelist(
565 !!free_
566 void
567 *anagent);\\
568 !!
569 (
570 !!free_
571 void
572 *xmachinelist);\\
573 !!
574 XMachineList
575 (
576 !!initialize_
577 void
578 Constants!!constants;\\
579 \\
580 _message;
581 *
582 !!
583 m_
584 *xmessagelist);\\
585 !!
586 XMessageList
587 (
588 void!!initialize_
589 iteration_loop;\\
590 !!
591 int
592 ();\\
593 !!*get_
594 );\\
595 !!
596 (
597 !!set_
598 void
599 ();\\
600 !!get_
601 ();\\
602 !!*get_
603 #endif
