0 }\\
1 }\\
2 exit(EXIT_FAILURE);\\
3 %s\n",CU_get_error_msg());\\
4 -
5 "suite!!registration!!failed
6 fprintf(stderr,
7 {\\
8 CUE_SUCCESS)\\
9 !=
10 (CU_register_suites(suites)
11 if
12 !!assert(!CU_is_test_running());\\
13 CU_get_registry());\\
14 !=
15 !!assert(NULL
16 {\\
17 void!!AddTests()\\
18 }\\
19 3);\\
20 9,
21 12,
22 3,\\
23 9,
24 12,
25 1,\\
26 4,
27 4,
28 42,\\
29 47,
30 89,
31 21,\\
32 10,
33 31,
34 3,\\
35 14,
36 14,
37 !!!!!!!!!!!!asserts%8u%9u%9u\n\n",\\
38 "\n
39 %9u%9u%9u"\\
40 !!!!!!!!!!!!tests
41 "\n
42 stop!!on!!error!!suites%9u%9u%9u"\\
43 "\n\n
44 !!!!!!!!!!!!asserts%8u%9u%9u"\\
45 "\n
46 %9u%9u%9u"\\
47 !!!!!!!!!!!!tests
48 "\n
49 ignore!!errors!!suites%9u%9u%9u"\\
50 "\n\n
51 Fail"\\
52 Pass!!!!#
53 Run!!!!#
54 Error!!Handling!!Type!!!!!!#
55 "\n\n
56 Results:"\\
57 Test
58 "\n\nExpected
59 fprintf(stdout,
60 {\\
61 void!!print_example_results(void)\\
62 #include!!"header.h"\\
63 #include!!"Suite.h"\\
64 }\\
65 !!0;\\
66 return
67 free(expected_messages);
68 free(current_messages);
69 free_xmessagelist(expected_messages);\\
70 free_xmessagelist(current_messages);\\
71 free_suite(doc);\\
72 {\\
73 _clean(void)\\
74 int!!
75 }\\
76 !!0;\\
77 return
78 &root_element,&doc);\\
79 ",
80 read_suite("
81 initialize_xmessagelist(expected_messages);\\
82 initialize_xmessagelist(current_messages);\\
83 malloc(sizeof(XMessageList));\\
84 *)
85 !!expected_messages=(XMessageList
86 malloc(sizeof(XMessageList));\\
87 *)
88 !!current_messages=(XMessageList
89 {\\
90 _init(void)\\
91 int!!
92 !!!!!!{\\
93 XML_ELEMENT_NODE)\\
94 ==
95 (cur_node->type
96 !!!!!!if
97 !!!!!!{\\
98 cur_node->next)\\
99 =
100 cur_node
101 cur_node;
102 a_node;
103 =
104 (cur_node
105 !!for
106 state\n");\\
107 !!
108 !!printf("reading!!x-agent
109 NULL;\\
110 =
111 *cur_node
112 !!xmlNode
113 {\\
114 !!*xmessagelist)
115 XMessageList
116 !!*xmachinelist,
117 XMachineList
118 xmlNode!!*a_node,
119 void!!read_xml_states_and_messages(
120 ,cur_node->children);\\
121 an
122 xmachinelist->
123 (
124 read_xml_
125 !!
126 ")==0)
127 !!!!!!!!if(strcmp((char!!*)cur_node->name,"
128 !!!!!!{\\
129 XML_ELEMENT_NODE)\\
130 ==
131 (cur_node->type
132 !!!!!!if
133 !!!!!!{\\
134 cur_node->next)\\
135 =
136 cur_node
137 cur_node;
138 a_node;
139 =
140 (cur_node
141 !!!!for
142 \n");\\
143 message
144 !!
145 !!
146 !!!!printf("reading
147 !!!!xmlNode!!*aux_node;\\
148 NULL;\\
149 =
150 !!!!xmlNode!!*cur_node
151 !!{\\
152 {\\
153 !!*xmessageslist)
154 XMessageList
155 xmlNode!!*a_node,
156 void!!read_xml_messages(
157 }\\
158 state\n");\\
159 !!
160 !!x-agent
161 !!printf("readed
162 !!!!!!}\\
163 !!!!!!}\\
164 read_xml_messages(cur_node->children,xmessagelist);\\
165 !!
166 !!!!!!!!if(strcmp((char!!*)cur_node->name,"messages")==0)
167 !!!!!!!!}\\
168 !!!!!!!!!!}\\
169 _list,(char!!*)aux_node->content,&index);\\
170 _messages(xmessageslist->
171 !!!!!!!!!!!!read_xml_
172 \n");\\
173 !!!!!!!!!!!!printf("reading!!
174 !!!!!!!!!!!!aux_node=cur_node->children;\\
175 !!!!!!!!!!!!index=0;\\
176 !!!!!!!!!!!!int!!index;\\
177 !!!!!!!!!!{\\
178 ")==0)\\
179 !!!!!!!!if(strcmp((char!!*)cur_node->name,"
180 !!!!!!!!{\\
181 }\\
182 return!!0;
183 xmlCleanupParser();\\
184 xmlFreeDoc(doc);\\
185 {\\
186 )\\
187 !!*doc
188 xmlDoc
189 int!!free_suite(
190 !!}\\
191 !!return!!0;\\
192 xmlDocGetRootElement(*doc);\\
193 =
194 !!*root_element
195 }\\
196 filename);\\
197 %s\n",
198 !!!!printf("error:!!could!!not!!parse!!file
199 {\\
200 NULL)
201 ==
202 (doc
203 !!if
204 0);\\
205 NULL,
206 xmlReadFile(filename,
207 =
208 *doc
209 !!
210 */\\
211 DOM
212 the
213 get
214 and
215 file
216 the
217 /*parse
218 !!LIBXML_TEST_VERSION\\
219 NULL;\\
220 =
221 *doc
222 !!
223 {\\
224 !!**doc)\\
225 xmlDoc
226 !!**root_element,
227 *filename,xmlNode
228 read_suite(char
229 !!
230 int
231 }\\
232 !!}\\
233 !!!!!!}\\
234 !!read_xml_constants(&constants,cur_node->children);\\
235 !!!!!!if(strcmp((char!!*)cur_node->name,"constants")==0)
236 !!read_xml_values(cur_node->children,current,expected,current_messages,expected_messages,unit_name);\\
237 !!!!!!if(strcmp((char!!*)cur_node->name,"unittest")==0)
238 !!!!!!{\\
239 XML_ELEMENT_NODE)\\
240 ==
241 (cur_node->type
242 !!!!!!if
243 !!!!!!{\\
244 cur_node->next)\\
245 =
246 cur_node
247 cur_node;
248 a_node;
249 =
250 (cur_node
251 !!!!for
252 NULL;\\
253 =
254 *cur_node
255 !!!!xmlNode
256 !!!!printf("\nreading!!xml!!states\n");
257 !!{\\
258 )\\
259 !!*unit_name
260 !!*expected_messages,char
261 !!*current_messages,XMessageList
262 XMessageList
263 !!*expected,
264 XMachineList
265 !!*current,
266 XMachineList
267 !!read_suite_states(xmlNode!!*a_node,
268 void
269 }\\
270 *)a_node->content);\\
271 strcpy(name,(char
272 {\\
273 !!*name)\\
274 char
275 !!*a_node,
276 !!compile_name(xmlNode
277 void
278 }\\
279 tests\n");\\
280 for!!unit!!
281 !!
282 !!x-agent
283 !!!!printf("read
284 !!!!!!}\\
285 !!!!!!}\\
286 !!!!!!!!}\\
287 !!read_xml_constants(&constants,cur_node->children);\\
288 !!!!!!!!if(strcmp((char!!*)cur_node->name,"constants")==0)
289 read_xml_states_and_messages(cur_node->children,current,current_messages);\\
290 !!
291 !!!!!!!!if(strcmp((char!!*)cur_node->name,"fixture")==0)
292 read_xml_states_and_messages(cur_node->children,expected,expected_messages);\\
293 !!
294 !!!!!!!!if(strcmp((char!!*)cur_node->name,"expected")==0)
295 !!!!!!!!if(strcmp(name,unit_name)==0)!!{\\
296 !!compile_name(cur_node->children,name);\\
297 !!!!!!!!if(strcmp((char!!*)cur_node->name,"name")==0)
298 !!!!!!{\\
299 XML_ELEMENT_NODE)\\
300 ==
301 (cur_node->type
302 !!!!!!if
303 !!!!!!{\\
304 cur_node->next)\\
305 =
306 cur_node
307 cur_node;
308 a_node;
309 =
310 (cur_node
311 !!!!for
312 tests\n");\\
313 for!!unit!!
314 !!
315 !!x-agent
316 !!!!printf("reading
317 NULL;\\
318 =
319 *cur_node
320 !!!!xmlNode
321 !!char!!name[50];\\
322 !!{\\
323 !!*unit_name)\\
324 char
325 !!*expected_messages,
326 !!*current_messages,XMessageList
327 XMessageList
328 !!*expected,
329 XMachineList
330 !!*current,
331 XMachineList
332 xmlNode!!*a_node,
333 void!!read_xml_values(
334 }\\
335 !!}\\
336 !!!!!!}\\
337 !!!!!!}\\
