0 }\\
1 !!*a==*b;\\
2 !!return
3 {\\
4 int!!equal_char(char!!*a,char!!*b)\\
5 }\\
6 !!(abs(*a)>(abs(*b)-TESTPREC))&&((abs(*a)<(abs(*b)+TESTPREC)));\\
7 !!return
8 {\\
9 int!!equal_float(float!!*a,float!!*b)\\
10 }\\
11 !!(abs(*a)>(abs(*b)-TESTPREC))&&((abs(*a)<(abs(*b)+TESTPREC)));\\
12 !!return
13 {\\
14 int!!equal_double(double!!*a,double!!*b)\\
15 }\\
16 !!*a==*b;\\
17 !!return
18 {\\
19 int!!equal_int(int!!*a,int!!*b)\\
20 }\\
21 *c='\0';\\
22 {\\
23 void!!init_char(char!!*c)\\
24 }\\
25 *f=0;\\
26 {\\
27 void!!init_float(float!!*f)\\
28 }\\
29 *d=0;\\
30 {\\
31 void!!init_double(double!!*d)\\
32 }\\
33 *i=0;\\
34 {\\
35 void!!init_int(int!!*i)\\
36 !!"header.h"\\
37 #include
38 }\\
39 !!!!}\\
40 !!!!aninstance->size--;\\
41 aninstance->array[i+1];\\
42 =
43 !!!!!!aninstance->array[i]
44 i++)
45 1);
46 -
47 (size
48 <
49 i
50 index;
51 =
52 !!!!for(i
53 !!!!{\\
54 size)\\
55 <=
56 !!if(index
57 !!size=aninstance->size;\\
58 !!int!!i,size;\\
59 {\\
60 int!!index)\\
61 _array!!*aninstance,
62 (
63 remove_
64 !!
65 void
66 }\\
67 !!anarray->size++;\\
68 (aux,&tmp);\\
69 !!copy_
70 &anarray->array[anarray->size];\\
71 =
72 !!aux
73 !!}\\
74 )));\\
75 sizeof(
76 *
77 ((anarray->total_size)
78 !!*)realloc(anarray->array,
79 (
80 =
81 !!!!anarray->array
82 !!!!anarray->total_size=anarray->total_size+ARRAY_BLOCK_SIZE;\\
83 !!{\\
84 !!if(anarray->size==anarray->total_size)\\
85 =source;\\
86 tmp
87 !!
88 !!tmp;\\
89 !!
90 !!*aux;\\
91 !!
92 {\\
93 !!source)\\
94 _array!!*anarray,
95 (
96 void!!add_
97 }\\
98 fprintf(file,"%c",'}');\\
99 }\\
100 fprintf(file,"%c",',');\\
101 if(i<aninstance->size-1)
102 );\\
103 file
104 (&aninstance->array[i],
105 print_xml_
106 !!!!
107 {\\
108 for(i=0;i<aninstance->size;i++)\\
109 fprintf(file,"%c",'{');\\
110 int!!i;\\
111 {\\
112 )\\
113 *file
114 FILE
115 _array!!*aninstance,
116 _array(
117 print_xml_
118 !!
119 void
120 }\\
121 fprintf(file,"%c",'}');\\
122 }\\
123 fprintf(file,"%c",',');\\
124 if(i<size-1)
125 );\\
126 file
127 (&aninstance[i],
128 print_xml_
129 !!!!
130 {\\
131 for(i=0;i<size;i++)\\
132 fprintf(file,"%c",'{');\\
133 int!!i;\\
134 {\\
135 int!!size)\\
136 ,
137 *file
138 FILE
139 !!*aninstance,
140 (
141 _static_array
142 print_xml_
143 !!
144 void
145 }\\
146 *aninstance);\\
147 ",
148 "
149 fprintf(file,
150 {\\
151 )\\
152 *file
153 FILE
154 !!*aninstance,
155 (
156 print_xml_
157 !!
158 void
159 }\\
160 !!dest->array[i]=source->array[i];\\
161 for(i=0;i<source->size;i++)\\
162 int!!i;\\
163 {\\
164 _array!!*source)\\
165 _array!!*dest,
166 _array(
167 void!!copy_
168 }\\
169 !!dest[i]=source[i];\\
170 for(i=0;i<size;i++)\\
171 int!!i;\\
172 {\\
173 int!!size)\\
174 !!*source,
175 !!*dest,
176 _static_array(
177 void!!copy_
178 }\\
179 *dest=*source;\\
180 {\\
181 !!*source)\\
182 !!*dest,
183 (
184 void!!copy_
185 }\\
186 !!}\\
187 aux);\\
188 aninstance,
189 (
190 !!!!add_
191 !!!!*index=*index+1;\\
192 &aux,file,index);\\
193 (
194 !!!!read_xml_
195 !!{\\
196 while((file[*index]!='}')&&(*index<len))\\
197 !!!!*index=*index+1;\\
198 !!aux;\\
199 !!!!
200 !!len=strlen(file);\\
201 !!int!!len;\\
202 {\\
203 *index)\\
204 !!*file,int
205 _array!!*aninstance,char
206 _array(
207 void!!read_xml_
208 }\\
209 *index=*index+1;\\
210 !!!!}\\
211 (&aninstance[i],file,index);\\
212 !!!!!!read_xml_
213 *index=*index+1;\\
214 !!!!{\\
215 for(i=0;i<size;i++)\\
216 int!!i;\\
217 {\\
218 int!!size,int!!*index)\\
219 !!*file,
220 !!*aninstance,char
221 _static_array(
222 void!!read_xml_
223 !!}\\
224 \n",*aninstance);\\
225 !!
226 !!
227 //!!!!!!printf("reading
228 ",aninstance);\\
229 !!!!!!sscanf(buffer,"
230 //!!!!!!printf("%s",buffer);\\
231 !!!!!!buffer[j]='\0';\\
232 !!!!!!}\\
233 !!!!!!!!j++;\\
234 !!!!!!!!*index=*index+1;\\
235 !!!!!!!!buffer[j]=file[*index];\\
236 !!!!!!{\\
237 !!!!while((file[*index]!=',')&&(file[*index]!='}')&&(file[*index]!='\0')&&(*index<len))\\
238 !!!!buffer[j]='\0';
239 !!!!j=0;\\
240 !!!!len=strlen(file);\\
241 !!!!char!!buffer[MAXBUF];\\
242 !!!!int!!len;\\
243 !!!!int!!j;\\
244 !!{\\
245 char!!*file,int!!*index)\\
246 !!*aninstance,
247 (
248 void!!read_xml_
249 }\\
250 !!aninstance->size=0;
251 {\\
252 _array!!*aninstance)\\
253 _array(
254 !!reset_
255 void
256 }\\
257 !!free(aninstance->array);\\
258 {\\
259 _array!!*aninstance)\\
260 _array(
261 !!free_
262 void
263 }\\
264 (&aninstance->array[i]);\\
265 init_
266 for(i=0;i<aninstance->total_size;i++)\\
267 aninstance->total_size=ARRAY_BLOCK_SIZE;\\
268 aninstance->size=0;
269 )*ARRAY_BLOCK_SIZE);\\
270 *)malloc(sizeof(
271 aninstance->array=(
272 int!!i;\\
273 {\\
274 _array!!*aninstance)\\
275 _array(
276 !!init_
277 void
278 }\\
279 !!assertion;\\
280 return
281 (&a->array[i],&b->array[i]);\\
282 !!!!assertion=assertion&&equal_
283 for(i=0;i<a->size;i++)\\
284 !!0;\\
285 !!return
286 if(a->size!=b->size)
287 !!assertion=1;\\
288 !!int!!i;\\
289 !!int!!assertion;
290 {\\
291 _array!!*b)\\
292 _array!!*a,
293 _array(
294 !!equal_
295 int
296 }\\
297 !!assertion;\\
298 return
299 (&a[i],&b[i]);\\
300 equal_
301 !!!!assertion=assertion&
302 for(i=0;i<size;i++)\\
303 !!assertion=1;\\
304 !!int!!i;\\
305 !!int!!assertion;
306 {\\
307 size)\\
308 !!
309 !!*b,int
310 !!*a,
311 _static_array(
312 !!equal_
313 int
314 }\\
315 (&aninstance[i]);\\
316 init_
317 for(i=0;i<size;i++)\\
318 int!!i;\\
319 {\\
320 size)\\
321 !!
322 int
323 !!*aninstance,
324 _static_array(
325 !!init_
326 void
327 {\\
328 !!*aninstance)\\
329 (
330 init_
331 !!
332 void
333 );\\
334 &aninstance->
335 (
336 init_
337 );\\
338 ,
339 aninstance->
340 _array(
341 init_
342 {\\
343 !!*aninstance)\\
344 (
345 free_
346 !!
347 void
348 }\\
349 ));\\
350 &(aninstance->
351 (
352 free_
353 !!result=1;\\
354 !!result;\\
355 !!int
356 {\\
357 )\\
358 !!*b
359 !!*a,
360 (
361 equal_
362 !!
363 int
364 }\\
365 );\\
366 ,&b->
367 &a->
368 (
369 equal_
370 &&
371 !!result=result
372 );\\
373 ,
374 b->
375 ,
376 a->
377 _array(
378 equal_
379 &&
380 !!result=result
381 {\\
382 !!*source)\\
383 !!*dest,
384 (
385 copy_
386 !!
387 void
388 }\\
389 !!result;
390 return
391 );\\
392 ,
393 source->
394 ,
395 dest->
396 _array(
397 copy_
398 );\\
399 &source->
400 ,
401 &dest->
402 (
403 copy_
404 _array!!*anarray
405 (
406 void!!add_
407 }\\
408 ]
409 [
410 !!
411 ,
412 !!
413 !!
414 ,
415 !!
416 !!*
417 ,
418 &anarray->array[anarray->size];\\
419 =
420 aux
421 !!}\\
422 (&anarray->array[i]);\\
423 !!!!init_
424 for(i=prec_size;i<anarray->total_size;i++)\\
425 )));\\
426 sizeof(
427 *
428 ((anarray->total_size)
429 !!*)realloc(anarray->array,
430 (
431 =
432 !!!!anarray->array
433 !!!!anarray->total_size=anarray->total_size+ARRAY_BLOCK_SIZE;\\
434 !!!!prec_size=anarray->total_size;\\
435 !!!!{\\
436 !!if(anarray->size==anarray->total_size)\\
437 !!*aux;\\
438 !!int!!prec_size;\\
439 !!int!!i;\\
440 {\\
441 )\\
442 ,
443 ,
444 aux->
445 _array(
446 copy_
447 &
448 ,
449 )
450 (&(aux->
451 copy_
452 ,
453 )
454 (&(aux->
455 copy_
456 );\\
457 dest
458 (
459 add_
460 !!!!aux=&source->array[i];\\
461 !!{\\
462 for(i=0;i<source->size;i++)\\
463 !!dest->size=0;\\
464 !!*aux;\\
465 !!
466 !!int!!i;\\
467 {\\
468 _array!!*source)\\
469 _array!!*dest,
470 _array(
471 copy_
472 !!
473 void
474 }\\
475 anarray->size++;\\
476 ,aux->
477 &aux->
478 ,
479 aux->
480 ,
481 \n",file);\\
482 %s
483 !!
484 //printf("reading
485 //printf("\n%d",*index);\\
486 {\\
487 int!!*index)\\
488 char!!*file,
489 !!*aninstance,
490 (
491 read_xml_
492 !!
493 void
494 }\\
495 aninstance->array=NULL;\\
496 ;\\
497 free(aninstance->array)
498 (&aninstance->array[i]);\\
499 !!!!free_
500 for(i=0;i<aninstance->total_size;i++)\\
501 int!!i;\\
502 {\\
503 _array!!*aninstance)\\
504 _array(
505 free_
506 !!
507 void
508 }\\
509 0;\\
510 =
511 aninstance->size
512 {\\
513 _array!!*aninstance)\\
514 _array(
515 reset_
516 !!
517 void
518 }\\
519 (&aninstance->array[i]);\\
520 !!!!init_
521 for(i=0;i<aninstance->total_size;i++)\\
522 ));\\
523 *)malloc(ARRAY_BLOCK_SIZE!!*sizeof(
524 (
525 =
526 aninstance->array
527 ARRAY_BLOCK_SIZE;\\
528 =
529 aninstance->total_size
530 0;\\
531 =
532 aninstance->size
533 int!!i;\\
534 {\\
535 _array!!*aninstance)\\
536 _array(
537 init_
538 !!
539 void
540 }\\
541 !!result;\\
542 return
543 (&a[i],&b[i]);\\
544 !!!!result=result&&equal_
545 !!for(i=0;i<size;i++)\\
546 !!result=1;\\
547 !!int!!i,result;\\
548 {\\
549 int!!size)\\
550 !!*b,
551 !!*a,
552 _static_array(
553 equal_
554 !!
555 int
556 }\\
557 (&aninstance[i]);\\
558 !!init_
559 for(i=0;i<size;i++)\\
560 int!!i;\\
561 {\\
562 int!!size)\\
563 !!*aninstance,
564 _static_array(
565 init_
566 !!
567 void
568 }\\
569 return!!result;\\
570 &a->array[i],&b->array[i]);\\
571 (
572 result=result&&equal_
573 for(i=0;i<a->size;i++)\\
574 !!0;\\
575 !!return
576 if(a->size!=b->size)
577 result=1;\\
578 int!!i,result;\\
579 {\\
580 _array!!*b)\\
581 _array!!*a,
582 _array(
583 equal_
584 !!
585 int
586 }\\
587 !!}\\
588 );\\
589 *index=*index+1;\\
590 index);\\
591 ,
592 file,
593 ,
594 _array(aninstance->
595 read_xml_
596 index);\\
597 file,
598 ,
599 (&aninstance->
600 read_xml_
601 (aninstance
602 !!!!add_
603 &aux,file,index);\\
604 (
605 !!!!read_xml_
606 !!!!cond=0;\\
607 !!{\\
608 while((*index<len-1)&&(file[*index]!='}'))\\
609 !!cond=1;\\
610 (&aux);\\
611 init_
612 !!aux;\\
613 !!!!*index=*index+1;\\
614 !!len=strlen(file);\\
615 !!int!!len,cond;\\
616 {\\
617 int!!*index)\\
618 char!!*file,
619 _array!!*aninstance,
620 _array(
621 read_xml_
622 !!
623 void
624 }\\
625 *index=*index+1;\\
626 &aux.
627 ,
628 aux.
629 ,
630 fprintf(file,"%c",'{');\\
631 {\\
632 FILE!!*file)\\
633 !!*aninstance,
634 (
635 print_xml_
636 !!
637 void
638 }\\
639 *index=*index+1;\\
640 !!!!}\\
641 (&aninstance[i],file,index);\\
642 !!!!!!read_xml_
643 *index=*index+1;\\
644 !!!!{\\
645 for(i=0;i<size;i++)\\
646 int!!i;\\
647 {\\
648 int!!size,int!!*index)\\
649 !!*file,
650 !!*aninstance,char
651 _static_array(
652 void!!read_xml_
653 }\\
654 (&aux);\\
655 free_
656 !!!!*index=*index+1;\\
657 !!!!if(cond)
658 !!}\\
659 !!!!*index=*index+1;\\
660 );\\
661 );\\
662 file,
663 ,
664 _array(aninstance->
665 print_xml_
666 file);\\
667 ,
668 (&aninstance->
669 print_xml_
670 !!!!fprintf(file,",");\\
671 }\\
672 !!!!}\\
673 !!!!!!aninstance->size--;\\
674 );\\
675 &aninstance->array[i+1]
676 ,
677 &aninstance->array[i]
678 (
679 !!!!!!!!copy_
680 i++)
681 1);
682 -
683 (size
684 <
685 i
686 index;
687 =
688 !!!!!!for(i
689 !!!!{\\
690 size)\\
691 <=
692 !!if(index
693 !!size=aninstance->size;\\
694 !!int!!i,size;\\
695 {\\
696 int!!index)\\
697 _array!!*aninstance,
698 (
699 remove_
700 !!
701 void
702 }\\
703 fprintf(file,"%c",'}');\\
704 }\\
705 fprintf(file,"%c",',');\\
706 if(i<size-1)
707 );\\
708 file
709 (&aninstance[i],
710 print_xml_
711 !!!!
712 {\\
713 for(i=0;i<size;i++)\\
714 fprintf(file,"%c",'{');\\
715 int!!i;\\
716 {\\
717 int!!size)\\
718 ,
719 *file
720 FILE
721 !!*aninstance,
722 (
723 _static_array
724 print_xml_
725 !!
726 void
727 }\\
728 fprintf(file,"%c",'}');\\
729 !!}\\
730 !!!!!!fprintf(file,"%c",',');\\
731 !!!!if(i<aninstance->size-1)\\
732 (&aninstance->array[i],file);\\
733 !!!!print_xml_
734 !!{\\
735 for(i=0;i<aninstance->size;i++)\\
736 fprintf(file,"%c",'{');\\
737 int!!i;\\
738 {\\
739 FILE!!*file)\\
740 _array!!*aninstance,
741 _array(
742 print_xml_
743 !!
744 void
745 }\\
746 fprintf(file,"%c",'}');\\
