0 !!"header.h"\\
1 #include
2 {\\
3 *anagent)\\
4 !!
5 (
6 init_
7 !!
8 void
9 );\\
10 ,
11 _array(anagent->
12 init_
13 );\\
14 (&anagent->
15 init_
16 {\\
17 !!*anagent)
18 (
19 void!!free_
20 }\\
21 );\\
22 xmachinelist->an
23 (
24 init_
25 ));\\
26 (
27 (sizeof
28 malloc
29 !!*)
30 (
31 =
32 xmachinelist->an
33 {\\
34 *xmachinelist)
35 !!
36 XMachineList
37 (
38 void!!initialize_
39 }\\
40 );\\
41 &anagent->
42 (
43 !!free_
44 !!!!{\\
45 XML_ELEMENT_NODE)\\
46 ==
47 (cur_node->type
48 if
49 !!{\\
50 cur_node->next)\\
51 =
52 cur_node
53 cur_node;
54 a_node;
55 =
56 (cur_node
57 for
58 \n");\\
59 printf("reading!!
60 !!!!xmlNode!!*aux_node;\\
61 !!!!xmlNode!!*cur_node;\\
62 !!{\\
63 xmlNode!!*a_node)\\
64 !!*anagent,
65 (
66 read_xml_
67 !!
68 void
69 }\\
70 }\\
71 !!!!!!!!
72 aux_node->content,&index);\\
73 ,(char!!*)
74 ->
75 anagent
76 (&
77 read_xml_
78 !!!!!!!!
79 !!!!!!!!aux_node=cur_node->children;
80 \n");\\
81 !!!!!!!!printf("reading!!
82 index=0;\\
83 !!!!!!!!
84 int!!index;\\
85 !!!!!!!!
86 {\\
87 !!!!!!!!
88 ")==0)!!
89 if(strcmp((char!!*)cur_node->name,"
90 !!!!!!
91 }\\
92 !!!!!!!!
93 );\\
94 ,&index
95 (char!!*)aux_node->content,
96 ,
97 ->
98 anagent
99 _array(
100 read_xml_
101 ")==0)!!
102 if(strcmp((char!!*)cur_node->name,"__name
103 !!!!!!
104 index=0;\\
105 !!!!!!!!
106 !!!!!!!!aux_node=cur_node->children;
107 \n");\\
108 !!!!!!!!printf("reading!!
109 int!!index;\\
110 !!!!!!!!
111 {\\
112 !!!!!!!!
113 >\n");\\
114 !!!!fprintf(file,"<
115 !!{\\
116 *file)\\
117 FILE
118 !!*anagent,
119 (
120 print_xml_
121 !!
122 void
123 !!}\\
124 !!}\\
125 !!!!}\\
126 >\n");\\
127 (file,"</
128 fprintf
129 !!!!!!
130 file);\\
131 ,
132 ->
133 anagent
134 (&
135 print_xml_
136 !!!!!!
137 >");\\
138 (file,"<
139 fprintf
140 !!!!!!
141 >\n");\\
142 (file,"</
143 fprintf
144 !!!!!!
145 );\\
146 file,
147 ,
148 _array(anagent->
149 print_xml_
150 !!!!!!
151 >");\\
152 (file,"<
153 fprintf
154 !!!!!!
155 !!}\\
156 >\n");\\
157 !!!!fprintf(file,"</
158 !!!!!!{\\
159 XML_ELEMENT_NODE)\\
160 ==
161 (cur_node->type
162 !!!!!!if
163 !!!!!!{\\
164 cur_node->next)\\
165 =
166 cur_node
167 cur_node;
168 a_node;
169 =
170 (cur_node
171 !!!!for
172 \n");\\
173 !!states
174 !!x-agent
175 !!!!printf("read
176 NULL;\\
177 =
178 *cur_node
179 !!!!xmlNode
180 !!{\\
181 !!*xmachinelist)\\
182 XMachineList
183 a_node,
184 void!!read_states(xmlNode!!*
185 !!!!!!!!}\\
186 ,cur_node->children);\\
187 xmachinelist->an
188 (
189 !!!!!!!!read_xml_
190 ));
191 sizeof(
192 (
193 malloc
194 *)
195 (
196 =
197 an
198 !!!!!!!!xmachinelist->
199 !!!!!!!!{\\
200 !!
201 ")==0)
202 !!!!!!!!if(strcmp((char!!*)cur_node->name,"
203 !!!!fprintf(file,"<states>\n");\\
204 file=fopen(filename,"w");\\
205 FILE!!*file;\\
206 !!{\\
207 !!*xmachinelist)\\
208 XMachineList
209 !!*filename,
210 void!!print_initial_states(char
211 !!}\\
212 !!!!!!}\\
213 !!!!!!}\\
214 ,file);\\
215 xmachinelist->an
216 (
217 )!!print_xml_
218 !!!!!!if(xmachinelist->an
219 !!!!{\\
220 XML_ELEMENT_NODE)\\
221 ==
222 (cur_node->type
223 if
224 !!{\\
225 cur_node->next)\\
226 =
227 cur_node
228 cur_node;
229 a_node;
230 =
231 (cur_node
232 for
233 \n");\\
234 constants
235 printf("reading!!
236 !!!!xmlNode!!*aux_node;\\
237 !!!!xmlNode!!*cur_node;\\
238 !!{\\
239 xmlNode!!*a_node)\\
240 !!*costante,
241 Constants
242 (
243 read_xml_constants
244 !!
245 void
246 }\\
247 xmlCleanupParser();\\
248 xmlFreeDoc(doc);\\
249 xmachinelist);\\
250 read_states(root_element->children,
251 xmlDocGetRootElement(doc);\\
252 =
253 root_element
254 }\\
255 filename);\\
256 %s\n",
257 file
258 parse!!
259 not!!
260 could!!
261 printf("error:!!
262 {\\
263 NULL)
264 ==
265 (doc
266 if
267 0);\\
268 NULL,
269 xmlReadFile(filename,
270 =
271 doc
272 LIBXML_TEST_VERSION\\
273 NULL;\\
274 =
275 *root_element
276 xmlNode
277 NULL;\\
278 =
279 *doc
280 xmlDoc
281 {\\
282 !!*xmachinelist)\\
283 XMachineList
284 read_initial_states(char!!*filename,
285 !!
286 void
287 !!}\\
288 fclose(file);\\
289 !!!!fprintf(file,"</states>\n");\\
290 }\\
291 !!!!!!!!
292 aux_node->content,&index);\\
293 ,(char!!*)
294 ->
295 costante
296 (&
297 read_xml_
298 !!!!!!!!
299 !!!!!!!!aux_node=cur_node->children;
300 \n");\\
301 !!!!!!!!printf("reading!!
302 index=0;\\
303 !!!!!!!!
304 int!!index;\\
305 !!!!!!!!
306 {\\
307 !!!!!!!!
308 ")==0)!!
309 if(strcmp((char!!*)cur_node->name,"
310 !!!!!!
311 }\\
312 !!!!!!!!
313 );\\
314 ,&index
315 (char!!*)aux_node->content,
316 ,
317 ->
318 costante
319 (
320 read_xml_
321 ")==0)!!
322 if(strcmp((char!!*)cur_node->name,"
323 !!!!!!
324 index=0;\\
325 !!!!!!!!
326 !!!!!!!!aux_node=cur_node->children;
327 \n");\\
328 !!!!!!!!printf("reading!!
329 int!!index;\\
330 !!!!!!!!
331 {\\
332 !!!!!!!!
333 {\\
334 !!*xmachinelist)\\
335 void!!initialize_xmachinelist(XMachineList
336 !!}\\
337 !!}\\
338 !!!!}\\
339 =NULL;\\
340 xmachinelist->an
341 }\\
342 ()\\
343 !!get_
344 ()\\
345 !!*get_
346 {\\
347 \\
348 ;
349 )->
350 an
351 !!(current->
352 return
353 )!!
354 an
355 current->
356 if(
357 )0;\\
358 (
359 !!
360 return
361 NULL;\\
362 !!
363 return
364 }\\
365 {\\
366 )\\
367 !!
368 (
369 !!set_
370 void
371 \\
372 ;
373 =
374 )->
375 (current->an
376 )!!
377 current->an
378 if(
379 }\\
380 {\\
381 ()\\
382 !!*get_
383 \\
384 ;
385 )->
386 !!(current->an
387 return
388 )!!
389 current->an
390 if(
391 \\
392 ;
393 )
394 )->
395 !!&((current->an
396 return
397 )!!
398 current->an
399 if(
400 }\\
401 !!NULL;\\
402 return
403 {\\
404 *xmachinelist)
405 !!
406 XMachineList
407 (
408 void!!free_xmachinelist
409 !!}\\
410 );\\
411 xmachinelist->an
412 !!!!free(
413 );\\
414 xmachinelist->an
415 (
416 !!!!free_
417 !!{\\
418 )
419 an
420 if(xmachinelist->
421 }\\
