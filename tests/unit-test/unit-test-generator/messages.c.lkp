#include !!"header.h"\\
repeat messages
begin 
void  !! init_ m_ __messagename ( m_ __messagename !!*aninstance)\\
 {\\
repeat variables
 begin
ifnotstatic
begin
 init_ __dtype ( &aninstance-> __name );\\ 
end 
ifstatic
begin
init_ __dtype ( aninstance-> __name , __dim );\\ 
end
 end 
}\\

void!!initialize_ __messagename ( XMessageList !! *xmessagelist)
{\\
xmessagelist-> __messagename _list= ( __messagename _messages!!*) malloc (sizeof ( __messagename _messages));\\
init_ __messagename _messages( xmessagelist-> __messagename _list);\\
}\\

void  !! copy_ m_ __messagename ( m_ __messagename !!*dest, m_ __messagename !!*source)\\
 {\\
repeat variables
 begin
ifstatic
begin
 copy_ __dtype ( dest-> __name , source-> __name , __dim );\\ 
end
ifnotstatic
begin
copy_ __dtype ( &dest-> __name , &source-> __name );\\ 
end
 end 
}\\
void!!add_ m_ __messagename (  __messagename _messages!!*anarray
repeat variables
begin
ifstatic
begin 
, __type !! __name [ __dim ]
end
ifnotstatic
begin 
, __type !! __name !!
end
end
)\\
{\\
m_ __messagename !!*aux;\\
!!if(anarray->size==anarray->total_size)\\
  !!!!{\\
  !!!!anarray->total_size=anarray->total_size+ARRAY_BLOCK_SIZE;\\
  !!!!anarray->array = ( m_ __messagename !!*)realloc(anarray->array, ((anarray->total_size) * sizeof( m_ __messagename )));\\
  !!}\\
aux = &anarray->array[anarray->size];\\
repeat variables
begin 
copy_ __dtype (
ifstatic
begin
 aux-> __name , __name  
, __dim 
end
ifnotstatic
begin
&(aux-> __name ) , & __name
end
 );\\
end
anarray->size++;\\
}\\

void  !! copy_ __messagename _messages( __messagename _messages!!*dest, __messagename _messages!!*source)\\
{\\
 int!!i;\\
  for(i=0;i<source->size;i++)\\
 copy_ m_ __messagename ( &dest->array[i],&source->array[i]);\\ 
}\\

int  !! equal_ m_ __messagename ( m_ __messagename !!*a, m_ __messagename !!*b )\\
 {\\ 
!!int !!result;\\
!!result=1;\\
repeat variables
 begin
ifnotstatic
begin
 !!result=result && equal_ __dtype ( &a-> __name ,&b-> __name );\\ 
end 
ifstatic
begin
!!result=result && equal_ __dtype ( a-> __name , b-> __name , __dim );\\ 
end
 end 
return !!result;
}\\

int   !! equal_ __messagename _messages( __messagename _messages!!*a, __messagename _messages!!*b)\\
{\\
 int!!i,result;\\
 result=1;\\
 if((a->size)!=(b->size)) !!return !!0;\\
  for(i=0;i<a->size;i++)\\
 result=result&&equal_ m_ __messagename ( &a->array[i],&b->array[i]);\\ 
 return!!result;\\
}\\
void  !! init_ m_ __messagename _static_messages( m_ __messagename !!*aninstance, int!!size)\\
{\\
int!!i;\\
  for(i=0;i<size;i++)\\
   !!init_ m_ __messagename (&aninstance[i]);\\
}\\
void  !! init_ __messagename _messages( __messagename _messages!!*aninstance)\\
{\\
        aninstance->size = 0;\\
        aninstance->index=0;\\
	aninstance->total_size = ARRAY_BLOCK_SIZE;\\
	aninstance->array = ( m_ __messagename *)malloc(ARRAY_BLOCK_SIZE!!*sizeof( m_ __messagename ));\\ 
}\\

void  !! reset_ __messagename _messages( __messagename _messages!!*aninstance)\\
{\\
        !!aninstance->size = 0;\\
        !!aninstance->index=0;\\
	
}\\

void  !! free_ __messagename _messages( __messagename _messages!!*aninstance)\\
{\\
        !!free(aninstance->array) ;\\
	
}\\
void  !! read_xml_ m_ __messagename ( m_ __messagename !!*aninstance, char!!*file, int!!*index)\\
{\\

 !!printf("%d",*index);\\
 !!printf("reading !! m_ __messagename  %s \n",file);\\
repeat variables
begin 
!!*index=*index+1;\\
  ifstatic
   begin
    
    read_xml_ __dtype (aninstance-> __name , file,  __dim , index);\\
   end
  ifnotstatic
   begin
    read_xml_ __type (&aninstance-> __name , file, index);\\
   end
end	
!!*index=*index+1;\\
}\\

void  !! read_xml_ __messagename _messages( __messagename _messages!!*aninstance, char!!*file, int!!*index)\\
{\\
!!printf("reading !!  __messagename  __messages %s \n",file);\\
!!int!!len,cond;\\
!!len=strlen(file);\\
!!!!*index=*index+1;\\
m_ __messagename !!aux;\\
printf("%c",file[*index]);\\
!!cond=1;\\
while((*index<len-1)&&(file[*index]!='}'))\\
!!{\\
!!!!cond=0;\\
!!!!read_xml_ m_ __messagename ( &aux,file,index);\\
!!!!add_ m_ __messagename (aninstance
repeat variables
begin
, aux. __name
end
);\\
!!!!*index=*index+1;\\
   !!}\\
!!!!if(cond) !!!!*index=*index+1;\\
!!printf("read !!  __messagename  __messages %s \n",file);\\
}\\


void  !! print_xml_ m_ __messagename ( m_ __messagename !!*aninstance, FILE!!*file)\\
{\\
fprintf(file,"%c",'{');\\
repeat variables
begin
  ifstatic
   begin
    print_xml_ __dtype (aninstance-> __name , file,  __dim );\\
   end
  ifnotstatic
   begin
    print_xml_ __type (&aninstance-> __name , file);\\
   end
 ifnotlast
  begin
 !!!!fprintf(file,",");\\
  end
end
fprintf(file,"%c",'}');\\	
}\\
void  !! print_xml_ __messagename _messages( __messagename _messages!!*aninstance, FILE!!*file)\\
{\\
int!!i;\\
fprintf(file,"%s","< __messagename >\n");\\
fprintf(file,"%c",'{');\\
for(i=0;i<aninstance->size;i++)\\
!!{\\
!!!!print_xml_ m_ __messagename (&aninstance->array[i],file);\\
!!!!if(i<aninstance->size-1)\\
!!!!!!fprintf(file,"%c",',');\\
!!}\\
fprintf(file,"%c",'}');\\
fprintf(file,"%s","\n</ __messagename >\n");\\
}\\
m_ __messagename !!*get_first_ __messagename _message ()\\
{\\ 

!! __messagename _messages!!*messages;\\
!! m_ __messagename !!*result;\\
!!messages=current_messages-> __messagename _list;\\
!!if(messages->size>0) 
!!{\\
!!!!messages->index=0;\\
!!!!result=&messages->array[0];\\
!!}\\
else!!result=NULL;\\
!!return!!result;\\
}\\

m_ __messagename !!*get_next_ __messagename _message ()\\
{\\
!! __messagename _messages!!*messages;\\
!!m_ __messagename !!*result;\\
!!messages=current_messages-> __messagename _list;\\
!!!!messages->index++;
!!if(messages->index<messages->size) 
!!{\\

!!!!result=&messages->array[messages->index];\\
!!}\\
!!else!!result=NULL;\\
!!return!!result;\\
}\\

void !! add_ __messagename _message _private( __messagename _messages!!*anarray,
repeat variables
begin
ifstatic
begin 
 __type !! __name [ __dim ] 
ifnotlast
begin
, 
end 
end
ifnotstatic
begin 
 __type !! __name !!
ifnotlast
begin
, 
end 
end
end
)\\
{\\
m_ __messagename !!*aux;\\
!!if(anarray->size==anarray->total_size)\\
  !!!!{\\
  !!!!anarray->total_size=anarray->total_size+ARRAY_BLOCK_SIZE;\\
  !!!!anarray->array = ( m_ __messagename !!*)realloc(anarray->array, ((anarray->total_size) * sizeof( m_ __messagename )));\\
  !!}\\
aux = &anarray->array[anarray->size];\\
repeat variables
begin 

ifstatic
begin
copy_ __dtype _array( aux-> __name , __name  
, __dim 
end
ifnotstatic
begin
copy_ __type (&(aux-> __name ) , & __name
end
 );\\
end
anarray->size++;\\
}\\

void !! add_ __messagename _message (
repeat variables
begin
ifstatic
begin 
 __type !! __name [ __dim ] 
ifnotlast
begin
, 
end 
end
ifnotstatic
begin 
 __type !! __name !!
ifnotlast
begin
, 
end 
end
end
)\\
{\\
__messagename _messages!!*list;\\
list=current_messages-> __messagename _list;\\
 add_ __messagename _message_private( list,
repeat variables
begin
 __name  
ifnotlast
begin
, 
end 
end
);\\

}\\
end
void!!initialize_xmessagelist(XMessageList !!*xmessagelist)\\
{\\
repeat messages
begin
xmessagelist-> __messagename _list= ( __messagename _messages!!*) malloc (sizeof ( __messagename _messages));\\
init_ __messagename _messages( xmessagelist-> __messagename _list);\\
end
}\\

void!!reset_xmessagelist(XMessageList !!*xmessagelist)\\
{\\
repeat messages
begin
reset_ __messagename _messages( xmessagelist-> __messagename _list);\\
end
}\\

void!!free_xmessagelist(XMessageList !!*xmessagelist)\\
{\\
repeat messages
begin
free_ __messagename _messages( xmessagelist-> __messagename _list);\\
end
}\\

void!!print_xmessagelist(XMessageList !!*xmessagelist, char!!*nome_file)\\
{\\
!!FILE!!*file;\\
!!file=fopen(nome_file,"w");\\
!!if(file)\\
!!{\\
repeat messages
begin
!!!!if(xmessagelist-> __messagename _list->size>0)!!print_xml_ __messagename _messages(xmessagelist-> __messagename _list, file);\\
end
!!}\\
fclose(file);
}\\


