=================================================
Sander, rev 1023
14/6/08

Changes to euracemodel.xml:
- Credit_UNIBI/model-sander.xml: scenario with different interest rates per region
- Statistical_Office_UNIBI/model-new.xml: changes to memory of Eurostat, messages, and order of functions.


1. Why is the function Firm_send_data_to_Eurostat run with phase 19 and not phase 0?

It should be on the last day of the month, so on day 20, 40, ...
Therefore: Period: Monthly, Phase: 0 ?
It seems that this is what it should be, if I compare the planned production and executed production with the data send to Eurostat.


2. New feature: Eurostat now also computes regional sums and total sums of production macrovariables.

* Added message variables to Eurostat:
    MONTHLY_SOLD_QUANTITY
    MONTHLY_OUTPUT
    MONTHLY_REVENUE
    MONTHLY_PLANNED_OUTPUT

* Added message variables to Firm:
    output (equal to production_quantity)
    planned_output (equal to planned_production_quantity)

* Added message variables to Firm_send_data_message:
    cum_total_sold_quantity
    output
    planned_output


3. Accounting at the end of an iteration instead of at the beginning

In order to have correct monthly data in Eurostat, the accounting of the firm needs to be done at the end of the month. The functions firms_compute_income_statement and balance sheet were at the beginning, but are now at the end of the iteration, so that all firms compute their data at the end of the month, instead of on the first day of the next month. This means that when they send their data to Eurostat, the message includes the most up-to-date financial data and Eurostat can compute the correct monthly macroeconomic statistics (otherwise the statistics refer to the previous month!). The computation of the liquidity needs for paying the production and financial commitments remains at the beginning of the iteration.

Each iteration now starts with:

(Period: Monthly, Phase: day_of_month_to_act)
Firm_calc_production_quantity
Firm_calc_input_demands
Firm_compute_total_liquidity_needs
etc.

At the end of an iteration, after Fim_calc_revenue (every day), we have:

(Period: Monthly, Phase: day_of_month_to_act)
Firm_compute_sales_statistics
Firm_compute_financial_payments
Firm_compute_income_statement
Firm_compute_dividends
Firm_compute_total_financial_payments
Firm_compute_balance_sheet


4. Order of states in the stategraph
After Firm_calc_revenue: state 13a
state 13a -> state 13b: Firm_compute_sales_statistics
state 13b -> state 13c: all the financial management stuff
From state 13c: Firm_update_specific_skills_of_workers
There is an idle going from 13a to 14 in case of not(day_of_month_to_act)

5. The resetting of counters:

    //Reset the counters
    CUM_TOTAL_SOLD_QUANTITY = 0.0;
    CUM_REVENUE = 0.0;        

This has to be done at the start of the month, so it is moved from 
Firm_calculate_income_statement to Firm_calc_production_quantity.

6. 
In Firm_set_quantities_zero:

    PLANNED_PRODUCTION_QUANTITY = 0;
    PRODUCTION_QUANTITY = 0;
    
This is run every day, except on the first day of the month. The reason we need this is that otherwise the same PRODUCTION_QUANTITY is added daily, while it is only a monthly quantity.
In order to get the production quantities correctly in the monthly statistics, we need 2 variables that stay in memory during the month:

    PLANNED_OUTPUT=PLANNED_PRODUCTION_QUANTITY: set in Firm_calculate_production_quantity
    OUTPUT        = PRODUCTION_QUANTITY : set in Firm_execute_production

These values can now be send at the end of the month to Eurostat in the send_data_message.

